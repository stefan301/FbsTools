//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from FlatBuffers.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace FbsParser {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class FlatBuffersParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ATTRIBUTE=1, ENUM=2, FILE_EXTENSION=3, FILE_IDENTIFIER=4, INCLUDE=5, NATIVE_INCLUDE=6, 
		NAMESPACE=7, ROOT_TYPE=8, RPC_SERVICE=9, STRUCT=10, TABLE=11, UNION=12, 
		SEMI=13, EQ=14, LP=15, RP=16, LB=17, RB=18, LC=19, RC=20, DOT=21, COMMA=22, 
		COLON=23, PLUS=24, MINUS=25, STRING_CONSTANT=26, BASE_TYPE_NAME=27, IDENT=28, 
		HEX_INTEGER_CONSTANT=29, INTEGER_CONSTANT=30, FLOAT_CONSTANT=31, BLOCK_COMMENT=32, 
		COMMENT=33, WS=34;
	public const int
		RULE_schema = 0, RULE_include_ = 1, RULE_namespace_decl = 2, RULE_attribute_decl = 3, 
		RULE_type_decl = 4, RULE_enum_decl = 5, RULE_union_decl = 6, RULE_root_decl = 7, 
		RULE_field_decl = 8, RULE_rpc_decl = 9, RULE_rpc_method = 10, RULE_type_ = 11, 
		RULE_enumval_decl = 12, RULE_commasep_enumval_decl = 13, RULE_unionval_with_opt_alias = 14, 
		RULE_commasep_unionval_with_opt_alias = 15, RULE_ident_with_opt_single_value = 16, 
		RULE_commasep_ident_with_opt_single_value = 17, RULE_metadata = 18, RULE_scalar = 19, 
		RULE_object_ = 20, RULE_ident_with_value = 21, RULE_commasep_ident_with_value = 22, 
		RULE_single_value = 23, RULE_value = 24, RULE_commasep_value = 25, RULE_file_extension_decl = 26, 
		RULE_file_identifier_decl = 27, RULE_ns_ident = 28, RULE_integer_const = 29, 
		RULE_identifier = 30, RULE_keywords = 31;
	public static readonly string[] ruleNames = {
		"schema", "include_", "namespace_decl", "attribute_decl", "type_decl", 
		"enum_decl", "union_decl", "root_decl", "field_decl", "rpc_decl", "rpc_method", 
		"type_", "enumval_decl", "commasep_enumval_decl", "unionval_with_opt_alias", 
		"commasep_unionval_with_opt_alias", "ident_with_opt_single_value", "commasep_ident_with_opt_single_value", 
		"metadata", "scalar", "object_", "ident_with_value", "commasep_ident_with_value", 
		"single_value", "value", "commasep_value", "file_extension_decl", "file_identifier_decl", 
		"ns_ident", "integer_const", "identifier", "keywords"
	};

	private static readonly string[] _LiteralNames = {
		null, "'attribute'", "'enum'", "'file_extension'", "'file_identifier'", 
		"'include'", "'native_include'", "'namespace'", "'root_type'", "'rpc_service'", 
		"'struct'", "'table'", "'union'", "';'", "'='", "'('", "')'", "'['", "']'", 
		"'{'", "'}'", "'.'", "','", "':'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ATTRIBUTE", "ENUM", "FILE_EXTENSION", "FILE_IDENTIFIER", "INCLUDE", 
		"NATIVE_INCLUDE", "NAMESPACE", "ROOT_TYPE", "RPC_SERVICE", "STRUCT", "TABLE", 
		"UNION", "SEMI", "EQ", "LP", "RP", "LB", "RB", "LC", "RC", "DOT", "COMMA", 
		"COLON", "PLUS", "MINUS", "STRING_CONSTANT", "BASE_TYPE_NAME", "IDENT", 
		"HEX_INTEGER_CONSTANT", "INTEGER_CONSTANT", "FLOAT_CONSTANT", "BLOCK_COMMENT", 
		"COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "FlatBuffers.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static FlatBuffersParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public FlatBuffersParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public FlatBuffersParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class SchemaContext : ParserRuleContext {
		public Include_Context[] include_() {
			return GetRuleContexts<Include_Context>();
		}
		public Include_Context include_(int i) {
			return GetRuleContext<Include_Context>(i);
		}
		public Namespace_declContext[] namespace_decl() {
			return GetRuleContexts<Namespace_declContext>();
		}
		public Namespace_declContext namespace_decl(int i) {
			return GetRuleContext<Namespace_declContext>(i);
		}
		public Type_declContext[] type_decl() {
			return GetRuleContexts<Type_declContext>();
		}
		public Type_declContext type_decl(int i) {
			return GetRuleContext<Type_declContext>(i);
		}
		public Enum_declContext[] enum_decl() {
			return GetRuleContexts<Enum_declContext>();
		}
		public Enum_declContext enum_decl(int i) {
			return GetRuleContext<Enum_declContext>(i);
		}
		public Union_declContext[] union_decl() {
			return GetRuleContexts<Union_declContext>();
		}
		public Union_declContext union_decl(int i) {
			return GetRuleContext<Union_declContext>(i);
		}
		public Root_declContext[] root_decl() {
			return GetRuleContexts<Root_declContext>();
		}
		public Root_declContext root_decl(int i) {
			return GetRuleContext<Root_declContext>(i);
		}
		public File_extension_declContext[] file_extension_decl() {
			return GetRuleContexts<File_extension_declContext>();
		}
		public File_extension_declContext file_extension_decl(int i) {
			return GetRuleContext<File_extension_declContext>(i);
		}
		public File_identifier_declContext[] file_identifier_decl() {
			return GetRuleContexts<File_identifier_declContext>();
		}
		public File_identifier_declContext file_identifier_decl(int i) {
			return GetRuleContext<File_identifier_declContext>(i);
		}
		public Attribute_declContext[] attribute_decl() {
			return GetRuleContexts<Attribute_declContext>();
		}
		public Attribute_declContext attribute_decl(int i) {
			return GetRuleContext<Attribute_declContext>(i);
		}
		public Rpc_declContext[] rpc_decl() {
			return GetRuleContexts<Rpc_declContext>();
		}
		public Rpc_declContext rpc_decl(int i) {
			return GetRuleContext<Rpc_declContext>(i);
		}
		public Object_Context[] object_() {
			return GetRuleContexts<Object_Context>();
		}
		public Object_Context object_(int i) {
			return GetRuleContext<Object_Context>(i);
		}
		public SchemaContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_schema; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterSchema(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitSchema(this);
		}
	}

	[RuleVersion(0)]
	public SchemaContext schema() {
		SchemaContext _localctx = new SchemaContext(Context, State);
		EnterRule(_localctx, 0, RULE_schema);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==INCLUDE || _la==NATIVE_INCLUDE) {
				{
				{
				State = 64; include_();
				}
				}
				State = 69;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 82;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << ENUM) | (1L << FILE_EXTENSION) | (1L << FILE_IDENTIFIER) | (1L << NAMESPACE) | (1L << ROOT_TYPE) | (1L << RPC_SERVICE) | (1L << STRUCT) | (1L << TABLE) | (1L << UNION) | (1L << LC))) != 0)) {
				{
				State = 80;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case NAMESPACE:
					{
					State = 70; namespace_decl();
					}
					break;
				case STRUCT:
				case TABLE:
					{
					State = 71; type_decl();
					}
					break;
				case ENUM:
					{
					State = 72; enum_decl();
					}
					break;
				case UNION:
					{
					State = 73; union_decl();
					}
					break;
				case ROOT_TYPE:
					{
					State = 74; root_decl();
					}
					break;
				case FILE_EXTENSION:
					{
					State = 75; file_extension_decl();
					}
					break;
				case FILE_IDENTIFIER:
					{
					State = 76; file_identifier_decl();
					}
					break;
				case ATTRIBUTE:
					{
					State = 77; attribute_decl();
					}
					break;
				case RPC_SERVICE:
					{
					State = 78; rpc_decl();
					}
					break;
				case LC:
					{
					State = 79; object_();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 84;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Include_Context : ParserRuleContext {
		public ITerminalNode STRING_CONSTANT() { return GetToken(FlatBuffersParser.STRING_CONSTANT, 0); }
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public ITerminalNode INCLUDE() { return GetToken(FlatBuffersParser.INCLUDE, 0); }
		public ITerminalNode NATIVE_INCLUDE() { return GetToken(FlatBuffersParser.NATIVE_INCLUDE, 0); }
		public Include_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_include_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterInclude_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitInclude_(this);
		}
	}

	[RuleVersion(0)]
	public Include_Context include_() {
		Include_Context _localctx = new Include_Context(Context, State);
		EnterRule(_localctx, 2, RULE_include_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 85;
			_la = TokenStream.LA(1);
			if ( !(_la==INCLUDE || _la==NATIVE_INCLUDE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 86; Match(STRING_CONSTANT);
			State = 87; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Namespace_declContext : ParserRuleContext {
		public ITerminalNode NAMESPACE() { return GetToken(FlatBuffersParser.NAMESPACE, 0); }
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public ITerminalNode[] DOT() { return GetTokens(FlatBuffersParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FlatBuffersParser.DOT, i);
		}
		public Namespace_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_namespace_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterNamespace_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitNamespace_decl(this);
		}
	}

	[RuleVersion(0)]
	public Namespace_declContext namespace_decl() {
		Namespace_declContext _localctx = new Namespace_declContext(Context, State);
		EnterRule(_localctx, 4, RULE_namespace_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 89; Match(NAMESPACE);
			State = 90; identifier();
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 91; Match(DOT);
				State = 92; identifier();
				}
				}
				State = 97;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 98; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Attribute_declContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(FlatBuffersParser.ATTRIBUTE, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(FlatBuffersParser.STRING_CONSTANT, 0); }
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public Attribute_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterAttribute_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitAttribute_decl(this);
		}
	}

	[RuleVersion(0)]
	public Attribute_declContext attribute_decl() {
		Attribute_declContext _localctx = new Attribute_declContext(Context, State);
		EnterRule(_localctx, 6, RULE_attribute_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(ATTRIBUTE);
			State = 101; Match(STRING_CONSTANT);
			State = 102; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_declContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode LC() { return GetToken(FlatBuffersParser.LC, 0); }
		public ITerminalNode RC() { return GetToken(FlatBuffersParser.RC, 0); }
		public ITerminalNode TABLE() { return GetToken(FlatBuffersParser.TABLE, 0); }
		public ITerminalNode STRUCT() { return GetToken(FlatBuffersParser.STRUCT, 0); }
		public Field_declContext[] field_decl() {
			return GetRuleContexts<Field_declContext>();
		}
		public Field_declContext field_decl(int i) {
			return GetRuleContext<Field_declContext>(i);
		}
		public Type_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterType_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitType_decl(this);
		}
	}

	[RuleVersion(0)]
	public Type_declContext type_decl() {
		Type_declContext _localctx = new Type_declContext(Context, State);
		EnterRule(_localctx, 8, RULE_type_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			_la = TokenStream.LA(1);
			if ( !(_la==STRUCT || _la==TABLE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 105; identifier();
			State = 106; metadata();
			State = 107; Match(LC);
			State = 111;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << ENUM) | (1L << FILE_EXTENSION) | (1L << FILE_IDENTIFIER) | (1L << INCLUDE) | (1L << NATIVE_INCLUDE) | (1L << NAMESPACE) | (1L << ROOT_TYPE) | (1L << RPC_SERVICE) | (1L << STRUCT) | (1L << TABLE) | (1L << UNION) | (1L << IDENT))) != 0)) {
				{
				{
				State = 108; field_decl();
				}
				}
				State = 113;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 114; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enum_declContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(FlatBuffersParser.ENUM, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode LC() { return GetToken(FlatBuffersParser.LC, 0); }
		public Commasep_enumval_declContext commasep_enumval_decl() {
			return GetRuleContext<Commasep_enumval_declContext>(0);
		}
		public ITerminalNode RC() { return GetToken(FlatBuffersParser.RC, 0); }
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public Enum_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enum_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterEnum_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitEnum_decl(this);
		}
	}

	[RuleVersion(0)]
	public Enum_declContext enum_decl() {
		Enum_declContext _localctx = new Enum_declContext(Context, State);
		EnterRule(_localctx, 10, RULE_enum_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(ENUM);
			State = 117; identifier();
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 118; Match(COLON);
				State = 119; type_();
				}
			}

			State = 122; metadata();
			State = 123; Match(LC);
			State = 124; commasep_enumval_decl();
			State = 125; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Union_declContext : ParserRuleContext {
		public ITerminalNode UNION() { return GetToken(FlatBuffersParser.UNION, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode LC() { return GetToken(FlatBuffersParser.LC, 0); }
		public Commasep_unionval_with_opt_aliasContext commasep_unionval_with_opt_alias() {
			return GetRuleContext<Commasep_unionval_with_opt_aliasContext>(0);
		}
		public ITerminalNode RC() { return GetToken(FlatBuffersParser.RC, 0); }
		public Union_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_union_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterUnion_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitUnion_decl(this);
		}
	}

	[RuleVersion(0)]
	public Union_declContext union_decl() {
		Union_declContext _localctx = new Union_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_union_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127; Match(UNION);
			State = 128; identifier();
			State = 129; metadata();
			State = 130; Match(LC);
			State = 131; commasep_unionval_with_opt_alias();
			State = 132; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Root_declContext : ParserRuleContext {
		public ITerminalNode ROOT_TYPE() { return GetToken(FlatBuffersParser.ROOT_TYPE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public Root_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_root_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterRoot_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitRoot_decl(this);
		}
	}

	[RuleVersion(0)]
	public Root_declContext root_decl() {
		Root_declContext _localctx = new Root_declContext(Context, State);
		EnterRule(_localctx, 14, RULE_root_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134; Match(ROOT_TYPE);
			State = 135; identifier();
			State = 136; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public ITerminalNode EQ() { return GetToken(FlatBuffersParser.EQ, 0); }
		public ScalarContext scalar() {
			return GetRuleContext<ScalarContext>(0);
		}
		public Field_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterField_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitField_decl(this);
		}
	}

	[RuleVersion(0)]
	public Field_declContext field_decl() {
		Field_declContext _localctx = new Field_declContext(Context, State);
		EnterRule(_localctx, 16, RULE_field_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138; identifier();
			State = 139; Match(COLON);
			State = 140; type_();
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 141; Match(EQ);
				State = 142; scalar();
				}
			}

			State = 145; metadata();
			State = 146; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rpc_declContext : ParserRuleContext {
		public ITerminalNode RPC_SERVICE() { return GetToken(FlatBuffersParser.RPC_SERVICE, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode LC() { return GetToken(FlatBuffersParser.LC, 0); }
		public ITerminalNode RC() { return GetToken(FlatBuffersParser.RC, 0); }
		public Rpc_methodContext[] rpc_method() {
			return GetRuleContexts<Rpc_methodContext>();
		}
		public Rpc_methodContext rpc_method(int i) {
			return GetRuleContext<Rpc_methodContext>(i);
		}
		public Rpc_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterRpc_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitRpc_decl(this);
		}
	}

	[RuleVersion(0)]
	public Rpc_declContext rpc_decl() {
		Rpc_declContext _localctx = new Rpc_declContext(Context, State);
		EnterRule(_localctx, 18, RULE_rpc_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; Match(RPC_SERVICE);
			State = 149; identifier();
			State = 150; Match(LC);
			State = 152;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 151; rpc_method();
				}
				}
				State = 154;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << ENUM) | (1L << FILE_EXTENSION) | (1L << FILE_IDENTIFIER) | (1L << INCLUDE) | (1L << NATIVE_INCLUDE) | (1L << NAMESPACE) | (1L << ROOT_TYPE) | (1L << RPC_SERVICE) | (1L << STRUCT) | (1L << TABLE) | (1L << UNION) | (1L << IDENT))) != 0) );
			State = 156; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rpc_methodContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode LP() { return GetToken(FlatBuffersParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(FlatBuffersParser.RP, 0); }
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public MetadataContext metadata() {
			return GetRuleContext<MetadataContext>(0);
		}
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public Rpc_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rpc_method; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterRpc_method(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitRpc_method(this);
		}
	}

	[RuleVersion(0)]
	public Rpc_methodContext rpc_method() {
		Rpc_methodContext _localctx = new Rpc_methodContext(Context, State);
		EnterRule(_localctx, 20, RULE_rpc_method);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 158; identifier();
			State = 159; Match(LP);
			State = 160; identifier();
			State = 161; Match(RP);
			State = 162; Match(COLON);
			State = 163; identifier();
			State = 164; metadata();
			State = 165; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Type_Context : ParserRuleContext {
		public ITerminalNode LB() { return GetToken(FlatBuffersParser.LB, 0); }
		public Type_Context type_() {
			return GetRuleContext<Type_Context>(0);
		}
		public ITerminalNode RB() { return GetToken(FlatBuffersParser.RB, 0); }
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public Integer_constContext integer_const() {
			return GetRuleContext<Integer_constContext>(0);
		}
		public ITerminalNode BASE_TYPE_NAME() { return GetToken(FlatBuffersParser.BASE_TYPE_NAME, 0); }
		public Ns_identContext ns_ident() {
			return GetRuleContext<Ns_identContext>(0);
		}
		public Type_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterType_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitType_(this);
		}
	}

	[RuleVersion(0)]
	public Type_Context type_() {
		Type_Context _localctx = new Type_Context(Context, State);
		EnterRule(_localctx, 22, RULE_type_);
		int _la;
		try {
			State = 177;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LB:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167; Match(LB);
				State = 168; type_();
				State = 171;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 169; Match(COLON);
					State = 170; integer_const();
					}
				}

				State = 173; Match(RB);
				}
				break;
			case BASE_TYPE_NAME:
				EnterOuterAlt(_localctx, 2);
				{
				State = 175; Match(BASE_TYPE_NAME);
				}
				break;
			case ATTRIBUTE:
			case ENUM:
			case FILE_EXTENSION:
			case FILE_IDENTIFIER:
			case INCLUDE:
			case NATIVE_INCLUDE:
			case NAMESPACE:
			case ROOT_TYPE:
			case RPC_SERVICE:
			case STRUCT:
			case TABLE:
			case UNION:
			case IDENT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 176; ns_ident();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Enumval_declContext : ParserRuleContext {
		public Ns_identContext ns_ident() {
			return GetRuleContext<Ns_identContext>(0);
		}
		public ITerminalNode EQ() { return GetToken(FlatBuffersParser.EQ, 0); }
		public Integer_constContext integer_const() {
			return GetRuleContext<Integer_constContext>(0);
		}
		public Enumval_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumval_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterEnumval_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitEnumval_decl(this);
		}
	}

	[RuleVersion(0)]
	public Enumval_declContext enumval_decl() {
		Enumval_declContext _localctx = new Enumval_declContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumval_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179; ns_ident();
			State = 182;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 180; Match(EQ);
				State = 181; integer_const();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commasep_enumval_declContext : ParserRuleContext {
		public Enumval_declContext[] enumval_decl() {
			return GetRuleContexts<Enumval_declContext>();
		}
		public Enumval_declContext enumval_decl(int i) {
			return GetRuleContext<Enumval_declContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FlatBuffersParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FlatBuffersParser.COMMA, i);
		}
		public Commasep_enumval_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commasep_enumval_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterCommasep_enumval_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitCommasep_enumval_decl(this);
		}
	}

	[RuleVersion(0)]
	public Commasep_enumval_declContext commasep_enumval_decl() {
		Commasep_enumval_declContext _localctx = new Commasep_enumval_declContext(Context, State);
		EnterRule(_localctx, 26, RULE_commasep_enumval_decl);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 184; enumval_decl();
			State = 189;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 185; Match(COMMA);
					State = 186; enumval_decl();
					}
					} 
				}
				State = 191;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 192; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unionval_with_opt_aliasContext : ParserRuleContext {
		public Ns_identContext[] ns_ident() {
			return GetRuleContexts<Ns_identContext>();
		}
		public Ns_identContext ns_ident(int i) {
			return GetRuleContext<Ns_identContext>(i);
		}
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public ITerminalNode EQ() { return GetToken(FlatBuffersParser.EQ, 0); }
		public Integer_constContext integer_const() {
			return GetRuleContext<Integer_constContext>(0);
		}
		public Unionval_with_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unionval_with_opt_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterUnionval_with_opt_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitUnionval_with_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Unionval_with_opt_aliasContext unionval_with_opt_alias() {
		Unionval_with_opt_aliasContext _localctx = new Unionval_with_opt_aliasContext(Context, State);
		EnterRule(_localctx, 28, RULE_unionval_with_opt_alias);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 195; ns_ident();
			State = 198;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 196; Match(COLON);
				State = 197; ns_ident();
				}
			}

			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EQ) {
				{
				State = 200; Match(EQ);
				State = 201; integer_const();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commasep_unionval_with_opt_aliasContext : ParserRuleContext {
		public Unionval_with_opt_aliasContext[] unionval_with_opt_alias() {
			return GetRuleContexts<Unionval_with_opt_aliasContext>();
		}
		public Unionval_with_opt_aliasContext unionval_with_opt_alias(int i) {
			return GetRuleContext<Unionval_with_opt_aliasContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FlatBuffersParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FlatBuffersParser.COMMA, i);
		}
		public Commasep_unionval_with_opt_aliasContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commasep_unionval_with_opt_alias; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterCommasep_unionval_with_opt_alias(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitCommasep_unionval_with_opt_alias(this);
		}
	}

	[RuleVersion(0)]
	public Commasep_unionval_with_opt_aliasContext commasep_unionval_with_opt_alias() {
		Commasep_unionval_with_opt_aliasContext _localctx = new Commasep_unionval_with_opt_aliasContext(Context, State);
		EnterRule(_localctx, 30, RULE_commasep_unionval_with_opt_alias);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 204; unionval_with_opt_alias();
			State = 209;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 205; Match(COMMA);
					State = 206; unionval_with_opt_alias();
					}
					} 
				}
				State = 211;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			State = 213;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 212; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ident_with_opt_single_valueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public Single_valueContext single_value() {
			return GetRuleContext<Single_valueContext>(0);
		}
		public Ident_with_opt_single_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident_with_opt_single_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterIdent_with_opt_single_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitIdent_with_opt_single_value(this);
		}
	}

	[RuleVersion(0)]
	public Ident_with_opt_single_valueContext ident_with_opt_single_value() {
		Ident_with_opt_single_valueContext _localctx = new Ident_with_opt_single_valueContext(Context, State);
		EnterRule(_localctx, 32, RULE_ident_with_opt_single_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 215; identifier();
			State = 218;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COLON) {
				{
				State = 216; Match(COLON);
				State = 217; single_value();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commasep_ident_with_opt_single_valueContext : ParserRuleContext {
		public Ident_with_opt_single_valueContext[] ident_with_opt_single_value() {
			return GetRuleContexts<Ident_with_opt_single_valueContext>();
		}
		public Ident_with_opt_single_valueContext ident_with_opt_single_value(int i) {
			return GetRuleContext<Ident_with_opt_single_valueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FlatBuffersParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FlatBuffersParser.COMMA, i);
		}
		public Commasep_ident_with_opt_single_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commasep_ident_with_opt_single_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterCommasep_ident_with_opt_single_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitCommasep_ident_with_opt_single_value(this);
		}
	}

	[RuleVersion(0)]
	public Commasep_ident_with_opt_single_valueContext commasep_ident_with_opt_single_value() {
		Commasep_ident_with_opt_single_valueContext _localctx = new Commasep_ident_with_opt_single_valueContext(Context, State);
		EnterRule(_localctx, 34, RULE_commasep_ident_with_opt_single_value);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220; ident_with_opt_single_value();
			State = 225;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 221; Match(COMMA);
				State = 222; ident_with_opt_single_value();
				}
				}
				State = 227;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MetadataContext : ParserRuleContext {
		public ITerminalNode LP() { return GetToken(FlatBuffersParser.LP, 0); }
		public Commasep_ident_with_opt_single_valueContext commasep_ident_with_opt_single_value() {
			return GetRuleContext<Commasep_ident_with_opt_single_valueContext>(0);
		}
		public ITerminalNode RP() { return GetToken(FlatBuffersParser.RP, 0); }
		public MetadataContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_metadata; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterMetadata(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitMetadata(this);
		}
	}

	[RuleVersion(0)]
	public MetadataContext metadata() {
		MetadataContext _localctx = new MetadataContext(Context, State);
		EnterRule(_localctx, 36, RULE_metadata);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 232;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LP) {
				{
				State = 228; Match(LP);
				State = 229; commasep_ident_with_opt_single_value();
				State = 230; Match(RP);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScalarContext : ParserRuleContext {
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(FlatBuffersParser.INTEGER_CONSTANT, 0); }
		public ITerminalNode HEX_INTEGER_CONSTANT() { return GetToken(FlatBuffersParser.HEX_INTEGER_CONSTANT, 0); }
		public ITerminalNode FLOAT_CONSTANT() { return GetToken(FlatBuffersParser.FLOAT_CONSTANT, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ScalarContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scalar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterScalar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitScalar(this);
		}
	}

	[RuleVersion(0)]
	public ScalarContext scalar() {
		ScalarContext _localctx = new ScalarContext(Context, State);
		EnterRule(_localctx, 38, RULE_scalar);
		try {
			State = 238;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case INTEGER_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; Match(INTEGER_CONSTANT);
				}
				break;
			case HEX_INTEGER_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; Match(HEX_INTEGER_CONSTANT);
				}
				break;
			case FLOAT_CONSTANT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; Match(FLOAT_CONSTANT);
				}
				break;
			case ATTRIBUTE:
			case ENUM:
			case FILE_EXTENSION:
			case FILE_IDENTIFIER:
			case INCLUDE:
			case NATIVE_INCLUDE:
			case NAMESPACE:
			case ROOT_TYPE:
			case RPC_SERVICE:
			case STRUCT:
			case TABLE:
			case UNION:
			case IDENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Object_Context : ParserRuleContext {
		public ITerminalNode LC() { return GetToken(FlatBuffersParser.LC, 0); }
		public Commasep_ident_with_valueContext commasep_ident_with_value() {
			return GetRuleContext<Commasep_ident_with_valueContext>(0);
		}
		public ITerminalNode RC() { return GetToken(FlatBuffersParser.RC, 0); }
		public Object_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_object_; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterObject_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitObject_(this);
		}
	}

	[RuleVersion(0)]
	public Object_Context object_() {
		Object_Context _localctx = new Object_Context(Context, State);
		EnterRule(_localctx, 40, RULE_object_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 240; Match(LC);
			State = 241; commasep_ident_with_value();
			State = 242; Match(RC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ident_with_valueContext : ParserRuleContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(FlatBuffersParser.COLON, 0); }
		public ValueContext value() {
			return GetRuleContext<ValueContext>(0);
		}
		public Ident_with_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ident_with_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterIdent_with_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitIdent_with_value(this);
		}
	}

	[RuleVersion(0)]
	public Ident_with_valueContext ident_with_value() {
		Ident_with_valueContext _localctx = new Ident_with_valueContext(Context, State);
		EnterRule(_localctx, 42, RULE_ident_with_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; identifier();
			State = 245; Match(COLON);
			State = 246; value();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commasep_ident_with_valueContext : ParserRuleContext {
		public Ident_with_valueContext[] ident_with_value() {
			return GetRuleContexts<Ident_with_valueContext>();
		}
		public Ident_with_valueContext ident_with_value(int i) {
			return GetRuleContext<Ident_with_valueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FlatBuffersParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FlatBuffersParser.COMMA, i);
		}
		public Commasep_ident_with_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commasep_ident_with_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterCommasep_ident_with_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitCommasep_ident_with_value(this);
		}
	}

	[RuleVersion(0)]
	public Commasep_ident_with_valueContext commasep_ident_with_value() {
		Commasep_ident_with_valueContext _localctx = new Commasep_ident_with_valueContext(Context, State);
		EnterRule(_localctx, 44, RULE_commasep_ident_with_value);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 248; ident_with_value();
			State = 253;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 249; Match(COMMA);
					State = 250; ident_with_value();
					}
					} 
				}
				State = 255;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,21,Context);
			}
			State = 257;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 256; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Single_valueContext : ParserRuleContext {
		public ScalarContext scalar() {
			return GetRuleContext<ScalarContext>(0);
		}
		public ITerminalNode STRING_CONSTANT() { return GetToken(FlatBuffersParser.STRING_CONSTANT, 0); }
		public Single_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_single_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterSingle_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitSingle_value(this);
		}
	}

	[RuleVersion(0)]
	public Single_valueContext single_value() {
		Single_valueContext _localctx = new Single_valueContext(Context, State);
		EnterRule(_localctx, 46, RULE_single_value);
		try {
			State = 261;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case ENUM:
			case FILE_EXTENSION:
			case FILE_IDENTIFIER:
			case INCLUDE:
			case NATIVE_INCLUDE:
			case NAMESPACE:
			case ROOT_TYPE:
			case RPC_SERVICE:
			case STRUCT:
			case TABLE:
			case UNION:
			case IDENT:
			case HEX_INTEGER_CONSTANT:
			case INTEGER_CONSTANT:
			case FLOAT_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 259; scalar();
				}
				break;
			case STRING_CONSTANT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 260; Match(STRING_CONSTANT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ValueContext : ParserRuleContext {
		public Single_valueContext single_value() {
			return GetRuleContext<Single_valueContext>(0);
		}
		public Object_Context object_() {
			return GetRuleContext<Object_Context>(0);
		}
		public ITerminalNode LB() { return GetToken(FlatBuffersParser.LB, 0); }
		public Commasep_valueContext commasep_value() {
			return GetRuleContext<Commasep_valueContext>(0);
		}
		public ITerminalNode RB() { return GetToken(FlatBuffersParser.RB, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitValue(this);
		}
	}

	[RuleVersion(0)]
	public ValueContext value() {
		ValueContext _localctx = new ValueContext(Context, State);
		EnterRule(_localctx, 48, RULE_value);
		try {
			State = 269;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ATTRIBUTE:
			case ENUM:
			case FILE_EXTENSION:
			case FILE_IDENTIFIER:
			case INCLUDE:
			case NATIVE_INCLUDE:
			case NAMESPACE:
			case ROOT_TYPE:
			case RPC_SERVICE:
			case STRUCT:
			case TABLE:
			case UNION:
			case STRING_CONSTANT:
			case IDENT:
			case HEX_INTEGER_CONSTANT:
			case INTEGER_CONSTANT:
			case FLOAT_CONSTANT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 263; single_value();
				}
				break;
			case LC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 264; object_();
				}
				break;
			case LB:
				EnterOuterAlt(_localctx, 3);
				{
				State = 265; Match(LB);
				State = 266; commasep_value();
				State = 267; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Commasep_valueContext : ParserRuleContext {
		public ValueContext[] value() {
			return GetRuleContexts<ValueContext>();
		}
		public ValueContext value(int i) {
			return GetRuleContext<ValueContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(FlatBuffersParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(FlatBuffersParser.COMMA, i);
		}
		public Commasep_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_commasep_value; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterCommasep_value(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitCommasep_value(this);
		}
	}

	[RuleVersion(0)]
	public Commasep_valueContext commasep_value() {
		Commasep_valueContext _localctx = new Commasep_valueContext(Context, State);
		EnterRule(_localctx, 50, RULE_commasep_value);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; value();
			State = 276;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 272; Match(COMMA);
					State = 273; value();
					}
					} 
				}
				State = 278;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			State = 280;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 279; Match(COMMA);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_extension_declContext : ParserRuleContext {
		public ITerminalNode FILE_EXTENSION() { return GetToken(FlatBuffersParser.FILE_EXTENSION, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(FlatBuffersParser.STRING_CONSTANT, 0); }
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public File_extension_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_extension_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterFile_extension_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitFile_extension_decl(this);
		}
	}

	[RuleVersion(0)]
	public File_extension_declContext file_extension_decl() {
		File_extension_declContext _localctx = new File_extension_declContext(Context, State);
		EnterRule(_localctx, 52, RULE_file_extension_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(FILE_EXTENSION);
			State = 283; Match(STRING_CONSTANT);
			State = 284; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class File_identifier_declContext : ParserRuleContext {
		public ITerminalNode FILE_IDENTIFIER() { return GetToken(FlatBuffersParser.FILE_IDENTIFIER, 0); }
		public ITerminalNode STRING_CONSTANT() { return GetToken(FlatBuffersParser.STRING_CONSTANT, 0); }
		public ITerminalNode SEMI() { return GetToken(FlatBuffersParser.SEMI, 0); }
		public File_identifier_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file_identifier_decl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterFile_identifier_decl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitFile_identifier_decl(this);
		}
	}

	[RuleVersion(0)]
	public File_identifier_declContext file_identifier_decl() {
		File_identifier_declContext _localctx = new File_identifier_declContext(Context, State);
		EnterRule(_localctx, 54, RULE_file_identifier_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 286; Match(FILE_IDENTIFIER);
			State = 287; Match(STRING_CONSTANT);
			State = 288; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Ns_identContext : ParserRuleContext {
		public IdentifierContext[] identifier() {
			return GetRuleContexts<IdentifierContext>();
		}
		public IdentifierContext identifier(int i) {
			return GetRuleContext<IdentifierContext>(i);
		}
		public ITerminalNode[] DOT() { return GetTokens(FlatBuffersParser.DOT); }
		public ITerminalNode DOT(int i) {
			return GetToken(FlatBuffersParser.DOT, i);
		}
		public Ns_identContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ns_ident; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterNs_ident(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitNs_ident(this);
		}
	}

	[RuleVersion(0)]
	public Ns_identContext ns_ident() {
		Ns_identContext _localctx = new Ns_identContext(Context, State);
		EnterRule(_localctx, 56, RULE_ns_ident);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 290; identifier();
			State = 295;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==DOT) {
				{
				{
				State = 291; Match(DOT);
				State = 292; identifier();
				}
				}
				State = 297;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Integer_constContext : ParserRuleContext {
		public ITerminalNode INTEGER_CONSTANT() { return GetToken(FlatBuffersParser.INTEGER_CONSTANT, 0); }
		public ITerminalNode HEX_INTEGER_CONSTANT() { return GetToken(FlatBuffersParser.HEX_INTEGER_CONSTANT, 0); }
		public Integer_constContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer_const; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterInteger_const(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitInteger_const(this);
		}
	}

	[RuleVersion(0)]
	public Integer_constContext integer_const() {
		Integer_constContext _localctx = new Integer_constContext(Context, State);
		EnterRule(_localctx, 58, RULE_integer_const);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 298;
			_la = TokenStream.LA(1);
			if ( !(_la==HEX_INTEGER_CONSTANT || _la==INTEGER_CONSTANT) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode IDENT() { return GetToken(FlatBuffersParser.IDENT, 0); }
		public KeywordsContext keywords() {
			return GetRuleContext<KeywordsContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(Context, State);
		EnterRule(_localctx, 60, RULE_identifier);
		try {
			State = 302;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 300; Match(IDENT);
				}
				break;
			case ATTRIBUTE:
			case ENUM:
			case FILE_EXTENSION:
			case FILE_IDENTIFIER:
			case INCLUDE:
			case NATIVE_INCLUDE:
			case NAMESPACE:
			case ROOT_TYPE:
			case RPC_SERVICE:
			case STRUCT:
			case TABLE:
			case UNION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 301; keywords();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeywordsContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(FlatBuffersParser.ATTRIBUTE, 0); }
		public ITerminalNode ENUM() { return GetToken(FlatBuffersParser.ENUM, 0); }
		public ITerminalNode FILE_EXTENSION() { return GetToken(FlatBuffersParser.FILE_EXTENSION, 0); }
		public ITerminalNode FILE_IDENTIFIER() { return GetToken(FlatBuffersParser.FILE_IDENTIFIER, 0); }
		public ITerminalNode INCLUDE() { return GetToken(FlatBuffersParser.INCLUDE, 0); }
		public ITerminalNode NATIVE_INCLUDE() { return GetToken(FlatBuffersParser.NATIVE_INCLUDE, 0); }
		public ITerminalNode NAMESPACE() { return GetToken(FlatBuffersParser.NAMESPACE, 0); }
		public ITerminalNode ROOT_TYPE() { return GetToken(FlatBuffersParser.ROOT_TYPE, 0); }
		public ITerminalNode RPC_SERVICE() { return GetToken(FlatBuffersParser.RPC_SERVICE, 0); }
		public ITerminalNode STRUCT() { return GetToken(FlatBuffersParser.STRUCT, 0); }
		public ITerminalNode TABLE() { return GetToken(FlatBuffersParser.TABLE, 0); }
		public ITerminalNode UNION() { return GetToken(FlatBuffersParser.UNION, 0); }
		public KeywordsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_keywords; } }
		public override void EnterRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.EnterKeywords(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IFlatBuffersListener typedListener = listener as IFlatBuffersListener;
			if (typedListener != null) typedListener.ExitKeywords(this);
		}
	}

	[RuleVersion(0)]
	public KeywordsContext keywords() {
		KeywordsContext _localctx = new KeywordsContext(Context, State);
		EnterRule(_localctx, 62, RULE_keywords);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 304;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ATTRIBUTE) | (1L << ENUM) | (1L << FILE_EXTENSION) | (1L << FILE_IDENTIFIER) | (1L << INCLUDE) | (1L << NATIVE_INCLUDE) | (1L << NAMESPACE) | (1L << ROOT_TYPE) | (1L << RPC_SERVICE) | (1L << STRUCT) | (1L << TABLE) | (1L << UNION))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '$', '\x135', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x3', '\x2', '\a', '\x2', '\x44', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'G', '\v', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', 'S', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', 'V', '\v', '\x2', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', '`', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '\x63', '\v', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\a', '\x6', 'p', '\n', 
		'\x6', '\f', '\x6', '\xE', '\x6', 's', '\v', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 
		'{', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x5', '\n', '\x92', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x6', '\v', '\x9B', 
		'\n', '\v', '\r', '\v', '\xE', '\v', '\x9C', '\x3', '\v', '\x3', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\xAE', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', '\r', '\xB4', '\n', '\r', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x5', '\xE', '\xB9', '\n', 
		'\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\a', '\xF', '\xBE', 
		'\n', '\xF', '\f', '\xF', '\xE', '\xF', '\xC1', '\v', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\xC4', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x5', '\x10', '\xC9', '\n', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x5', '\x10', '\xCD', '\n', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\a', '\x11', '\xD2', '\n', '\x11', '\f', '\x11', '\xE', '\x11', 
		'\xD5', '\v', '\x11', '\x3', '\x11', '\x5', '\x11', '\xD8', '\n', '\x11', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xDD', '\n', 
		'\x12', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\a', '\x13', '\xE2', 
		'\n', '\x13', '\f', '\x13', '\xE', '\x13', '\xE5', '\v', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x5', '\x14', '\xEB', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\xF1', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', 
		'\x17', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\a', '\x18', '\xFE', 
		'\n', '\x18', '\f', '\x18', '\xE', '\x18', '\x101', '\v', '\x18', '\x3', 
		'\x18', '\x5', '\x18', '\x104', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', 
		'\x5', '\x19', '\x108', '\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x5', '\x1A', '\x110', 
		'\n', '\x1A', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\a', '\x1B', 
		'\x115', '\n', '\x1B', '\f', '\x1B', '\xE', '\x1B', '\x118', '\v', '\x1B', 
		'\x3', '\x1B', '\x5', '\x1B', '\x11B', '\n', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\a', 
		'\x1E', '\x128', '\n', '\x1E', '\f', '\x1E', '\xE', '\x1E', '\x12B', '\v', 
		'\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', ' ', '\x3', ' ', '\x5', ' ', 
		'\x131', '\n', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x2', '\x2', 
		'\"', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x1C', '\x1E', ' ', '\"', '$', '&', '(', '*', 
		',', '.', '\x30', '\x32', '\x34', '\x36', '\x38', ':', '<', '>', '@', 
		'\x2', '\x6', '\x3', '\x2', '\a', '\b', '\x3', '\x2', '\f', '\r', '\x3', 
		'\x2', '\x1F', ' ', '\x3', '\x2', '\x3', '\xE', '\x2', '\x13D', '\x2', 
		'\x45', '\x3', '\x2', '\x2', '\x2', '\x4', 'W', '\x3', '\x2', '\x2', '\x2', 
		'\x6', '[', '\x3', '\x2', '\x2', '\x2', '\b', '\x66', '\x3', '\x2', '\x2', 
		'\x2', '\n', 'j', '\x3', '\x2', '\x2', '\x2', '\f', 'v', '\x3', '\x2', 
		'\x2', '\x2', '\xE', '\x81', '\x3', '\x2', '\x2', '\x2', '\x10', '\x88', 
		'\x3', '\x2', '\x2', '\x2', '\x12', '\x8C', '\x3', '\x2', '\x2', '\x2', 
		'\x14', '\x96', '\x3', '\x2', '\x2', '\x2', '\x16', '\xA0', '\x3', '\x2', 
		'\x2', '\x2', '\x18', '\xB3', '\x3', '\x2', '\x2', '\x2', '\x1A', '\xB5', 
		'\x3', '\x2', '\x2', '\x2', '\x1C', '\xBA', '\x3', '\x2', '\x2', '\x2', 
		'\x1E', '\xC5', '\x3', '\x2', '\x2', '\x2', ' ', '\xCE', '\x3', '\x2', 
		'\x2', '\x2', '\"', '\xD9', '\x3', '\x2', '\x2', '\x2', '$', '\xDE', '\x3', 
		'\x2', '\x2', '\x2', '&', '\xEA', '\x3', '\x2', '\x2', '\x2', '(', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '*', '\xF2', '\x3', '\x2', '\x2', '\x2', ',', 
		'\xF6', '\x3', '\x2', '\x2', '\x2', '.', '\xFA', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x107', '\x3', '\x2', '\x2', '\x2', '\x32', '\x10F', '\x3', 
		'\x2', '\x2', '\x2', '\x34', '\x111', '\x3', '\x2', '\x2', '\x2', '\x36', 
		'\x11C', '\x3', '\x2', '\x2', '\x2', '\x38', '\x120', '\x3', '\x2', '\x2', 
		'\x2', ':', '\x124', '\x3', '\x2', '\x2', '\x2', '<', '\x12C', '\x3', 
		'\x2', '\x2', '\x2', '>', '\x130', '\x3', '\x2', '\x2', '\x2', '@', '\x132', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x44', '\x5', '\x4', '\x3', '\x2', 
		'\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', 'G', '\x3', '\x2', 
		'\x2', '\x2', '\x45', '\x43', '\x3', '\x2', '\x2', '\x2', '\x45', '\x46', 
		'\x3', '\x2', '\x2', '\x2', '\x46', 'T', '\x3', '\x2', '\x2', '\x2', 'G', 
		'\x45', '\x3', '\x2', '\x2', '\x2', 'H', 'S', '\x5', '\x6', '\x4', '\x2', 
		'I', 'S', '\x5', '\n', '\x6', '\x2', 'J', 'S', '\x5', '\f', '\a', '\x2', 
		'K', 'S', '\x5', '\xE', '\b', '\x2', 'L', 'S', '\x5', '\x10', '\t', '\x2', 
		'M', 'S', '\x5', '\x36', '\x1C', '\x2', 'N', 'S', '\x5', '\x38', '\x1D', 
		'\x2', 'O', 'S', '\x5', '\b', '\x5', '\x2', 'P', 'S', '\x5', '\x14', '\v', 
		'\x2', 'Q', 'S', '\x5', '*', '\x16', '\x2', 'R', 'H', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'I', '\x3', '\x2', '\x2', '\x2', 'R', 'J', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'K', '\x3', '\x2', '\x2', '\x2', 'R', 'L', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'M', '\x3', '\x2', '\x2', '\x2', 'R', 'N', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'O', '\x3', '\x2', '\x2', '\x2', 'R', 'P', '\x3', '\x2', '\x2', 
		'\x2', 'R', 'Q', '\x3', '\x2', '\x2', '\x2', 'S', 'V', '\x3', '\x2', '\x2', 
		'\x2', 'T', 'R', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\x3', '\x2', '\x2', 
		'\x2', 'U', '\x3', '\x3', '\x2', '\x2', '\x2', 'V', 'T', '\x3', '\x2', 
		'\x2', '\x2', 'W', 'X', '\t', '\x2', '\x2', '\x2', 'X', 'Y', '\a', '\x1C', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\xF', '\x2', '\x2', 'Z', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '[', '\\', '\a', '\t', '\x2', '\x2', '\\', '\x61', 
		'\x5', '>', ' ', '\x2', ']', '^', '\a', '\x17', '\x2', '\x2', '^', '`', 
		'\x5', '>', ' ', '\x2', '_', ']', '\x3', '\x2', '\x2', '\x2', '`', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', '\x61', 
		'\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x64', '\x3', '\x2', '\x2', 
		'\x2', '\x63', '\x61', '\x3', '\x2', '\x2', '\x2', '\x64', '\x65', '\a', 
		'\xF', '\x2', '\x2', '\x65', '\a', '\x3', '\x2', '\x2', '\x2', '\x66', 
		'g', '\a', '\x3', '\x2', '\x2', 'g', 'h', '\a', '\x1C', '\x2', '\x2', 
		'h', 'i', '\a', '\xF', '\x2', '\x2', 'i', '\t', '\x3', '\x2', '\x2', '\x2', 
		'j', 'k', '\t', '\x3', '\x2', '\x2', 'k', 'l', '\x5', '>', ' ', '\x2', 
		'l', 'm', '\x5', '&', '\x14', '\x2', 'm', 'q', '\a', '\x15', '\x2', '\x2', 
		'n', 'p', '\x5', '\x12', '\n', '\x2', 'o', 'n', '\x3', '\x2', '\x2', '\x2', 
		'p', 's', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'q', 'r', '\x3', '\x2', '\x2', '\x2', 'r', 't', '\x3', '\x2', '\x2', '\x2', 
		's', 'q', '\x3', '\x2', '\x2', '\x2', 't', 'u', '\a', '\x16', '\x2', '\x2', 
		'u', '\v', '\x3', '\x2', '\x2', '\x2', 'v', 'w', '\a', '\x4', '\x2', '\x2', 
		'w', 'z', '\x5', '>', ' ', '\x2', 'x', 'y', '\a', '\x19', '\x2', '\x2', 
		'y', '{', '\x5', '\x18', '\r', '\x2', 'z', 'x', '\x3', '\x2', '\x2', '\x2', 
		'z', '{', '\x3', '\x2', '\x2', '\x2', '{', '|', '\x3', '\x2', '\x2', '\x2', 
		'|', '}', '\x5', '&', '\x14', '\x2', '}', '~', '\a', '\x15', '\x2', '\x2', 
		'~', '\x7F', '\x5', '\x1C', '\xF', '\x2', '\x7F', '\x80', '\a', '\x16', 
		'\x2', '\x2', '\x80', '\r', '\x3', '\x2', '\x2', '\x2', '\x81', '\x82', 
		'\a', '\xE', '\x2', '\x2', '\x82', '\x83', '\x5', '>', ' ', '\x2', '\x83', 
		'\x84', '\x5', '&', '\x14', '\x2', '\x84', '\x85', '\a', '\x15', '\x2', 
		'\x2', '\x85', '\x86', '\x5', ' ', '\x11', '\x2', '\x86', '\x87', '\a', 
		'\x16', '\x2', '\x2', '\x87', '\xF', '\x3', '\x2', '\x2', '\x2', '\x88', 
		'\x89', '\a', '\n', '\x2', '\x2', '\x89', '\x8A', '\x5', '>', ' ', '\x2', 
		'\x8A', '\x8B', '\a', '\xF', '\x2', '\x2', '\x8B', '\x11', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x8D', '\x5', '>', ' ', '\x2', '\x8D', '\x8E', 
		'\a', '\x19', '\x2', '\x2', '\x8E', '\x91', '\x5', '\x18', '\r', '\x2', 
		'\x8F', '\x90', '\a', '\x10', '\x2', '\x2', '\x90', '\x92', '\x5', '(', 
		'\x15', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', 
		'\x3', '\x2', '\x2', '\x2', '\x92', '\x93', '\x3', '\x2', '\x2', '\x2', 
		'\x93', '\x94', '\x5', '&', '\x14', '\x2', '\x94', '\x95', '\a', '\xF', 
		'\x2', '\x2', '\x95', '\x13', '\x3', '\x2', '\x2', '\x2', '\x96', '\x97', 
		'\a', '\v', '\x2', '\x2', '\x97', '\x98', '\x5', '>', ' ', '\x2', '\x98', 
		'\x9A', '\a', '\x15', '\x2', '\x2', '\x99', '\x9B', '\x5', '\x16', '\f', 
		'\x2', '\x9A', '\x99', '\x3', '\x2', '\x2', '\x2', '\x9B', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9C', '\x9A', '\x3', '\x2', '\x2', '\x2', '\x9C', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9D', '\x9E', '\x3', '\x2', '\x2', 
		'\x2', '\x9E', '\x9F', '\a', '\x16', '\x2', '\x2', '\x9F', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\xA0', '\xA1', '\x5', '>', ' ', '\x2', '\xA1', '\xA2', 
		'\a', '\x11', '\x2', '\x2', '\xA2', '\xA3', '\x5', '>', ' ', '\x2', '\xA3', 
		'\xA4', '\a', '\x12', '\x2', '\x2', '\xA4', '\xA5', '\a', '\x19', '\x2', 
		'\x2', '\xA5', '\xA6', '\x5', '>', ' ', '\x2', '\xA6', '\xA7', '\x5', 
		'&', '\x14', '\x2', '\xA7', '\xA8', '\a', '\xF', '\x2', '\x2', '\xA8', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\xA9', '\xAA', '\a', '\x13', '\x2', 
		'\x2', '\xAA', '\xAD', '\x5', '\x18', '\r', '\x2', '\xAB', '\xAC', '\a', 
		'\x19', '\x2', '\x2', '\xAC', '\xAE', '\x5', '<', '\x1F', '\x2', '\xAD', 
		'\xAB', '\x3', '\x2', '\x2', '\x2', '\xAD', '\xAE', '\x3', '\x2', '\x2', 
		'\x2', '\xAE', '\xAF', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB0', '\a', 
		'\x14', '\x2', '\x2', '\xB0', '\xB4', '\x3', '\x2', '\x2', '\x2', '\xB1', 
		'\xB4', '\a', '\x1D', '\x2', '\x2', '\xB2', '\xB4', '\x5', ':', '\x1E', 
		'\x2', '\xB3', '\xA9', '\x3', '\x2', '\x2', '\x2', '\xB3', '\xB1', '\x3', 
		'\x2', '\x2', '\x2', '\xB3', '\xB2', '\x3', '\x2', '\x2', '\x2', '\xB4', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\xB5', '\xB8', '\x5', ':', '\x1E', 
		'\x2', '\xB6', '\xB7', '\a', '\x10', '\x2', '\x2', '\xB7', '\xB9', '\x5', 
		'<', '\x1F', '\x2', '\xB8', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB8', 
		'\xB9', '\x3', '\x2', '\x2', '\x2', '\xB9', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\xBA', '\xBF', '\x5', '\x1A', '\xE', '\x2', '\xBB', '\xBC', '\a', 
		'\x18', '\x2', '\x2', '\xBC', '\xBE', '\x5', '\x1A', '\xE', '\x2', '\xBD', 
		'\xBB', '\x3', '\x2', '\x2', '\x2', '\xBE', '\xC1', '\x3', '\x2', '\x2', 
		'\x2', '\xBF', '\xBD', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\x3', 
		'\x2', '\x2', '\x2', '\xC0', '\xC3', '\x3', '\x2', '\x2', '\x2', '\xC1', 
		'\xBF', '\x3', '\x2', '\x2', '\x2', '\xC2', '\xC4', '\a', '\x18', '\x2', 
		'\x2', '\xC3', '\xC2', '\x3', '\x2', '\x2', '\x2', '\xC3', '\xC4', '\x3', 
		'\x2', '\x2', '\x2', '\xC4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\xC5', 
		'\xC8', '\x5', ':', '\x1E', '\x2', '\xC6', '\xC7', '\a', '\x19', '\x2', 
		'\x2', '\xC7', '\xC9', '\x5', ':', '\x1E', '\x2', '\xC8', '\xC6', '\x3', 
		'\x2', '\x2', '\x2', '\xC8', '\xC9', '\x3', '\x2', '\x2', '\x2', '\xC9', 
		'\xCC', '\x3', '\x2', '\x2', '\x2', '\xCA', '\xCB', '\a', '\x10', '\x2', 
		'\x2', '\xCB', '\xCD', '\x5', '<', '\x1F', '\x2', '\xCC', '\xCA', '\x3', 
		'\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', '\x2', '\xCD', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xD3', '\x5', '\x1E', '\x10', 
		'\x2', '\xCF', '\xD0', '\a', '\x18', '\x2', '\x2', '\xD0', '\xD2', '\x5', 
		'\x1E', '\x10', '\x2', '\xD1', '\xCF', '\x3', '\x2', '\x2', '\x2', '\xD2', 
		'\xD5', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD1', '\x3', '\x2', '\x2', 
		'\x2', '\xD3', '\xD4', '\x3', '\x2', '\x2', '\x2', '\xD4', '\xD7', '\x3', 
		'\x2', '\x2', '\x2', '\xD5', '\xD3', '\x3', '\x2', '\x2', '\x2', '\xD6', 
		'\xD8', '\a', '\x18', '\x2', '\x2', '\xD7', '\xD6', '\x3', '\x2', '\x2', 
		'\x2', '\xD7', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD8', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xD9', '\xDC', '\x5', '>', ' ', '\x2', '\xDA', '\xDB', 
		'\a', '\x19', '\x2', '\x2', '\xDB', '\xDD', '\x5', '\x30', '\x19', '\x2', 
		'\xDC', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDC', '\xDD', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '#', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xE3', 
		'\x5', '\"', '\x12', '\x2', '\xDF', '\xE0', '\a', '\x18', '\x2', '\x2', 
		'\xE0', '\xE2', '\x5', '\"', '\x12', '\x2', '\xE1', '\xDF', '\x3', '\x2', 
		'\x2', '\x2', '\xE2', '\xE5', '\x3', '\x2', '\x2', '\x2', '\xE3', '\xE1', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE4', '\x3', '\x2', '\x2', '\x2', 
		'\xE4', '%', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE3', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE7', '\a', '\x11', '\x2', '\x2', '\xE7', '\xE8', 
		'\x5', '$', '\x13', '\x2', '\xE8', '\xE9', '\a', '\x12', '\x2', '\x2', 
		'\xE9', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEA', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\xEA', '\xEB', '\x3', '\x2', '\x2', '\x2', '\xEB', '\'', 
		'\x3', '\x2', '\x2', '\x2', '\xEC', '\xF1', '\a', ' ', '\x2', '\x2', '\xED', 
		'\xF1', '\a', '\x1F', '\x2', '\x2', '\xEE', '\xF1', '\a', '!', '\x2', 
		'\x2', '\xEF', '\xF1', '\x5', '>', ' ', '\x2', '\xF0', '\xEC', '\x3', 
		'\x2', '\x2', '\x2', '\xF0', '\xED', '\x3', '\x2', '\x2', '\x2', '\xF0', 
		'\xEE', '\x3', '\x2', '\x2', '\x2', '\xF0', '\xEF', '\x3', '\x2', '\x2', 
		'\x2', '\xF1', ')', '\x3', '\x2', '\x2', '\x2', '\xF2', '\xF3', '\a', 
		'\x15', '\x2', '\x2', '\xF3', '\xF4', '\x5', '.', '\x18', '\x2', '\xF4', 
		'\xF5', '\a', '\x16', '\x2', '\x2', '\xF5', '+', '\x3', '\x2', '\x2', 
		'\x2', '\xF6', '\xF7', '\x5', '>', ' ', '\x2', '\xF7', '\xF8', '\a', '\x19', 
		'\x2', '\x2', '\xF8', '\xF9', '\x5', '\x32', '\x1A', '\x2', '\xF9', '-', 
		'\x3', '\x2', '\x2', '\x2', '\xFA', '\xFF', '\x5', ',', '\x17', '\x2', 
		'\xFB', '\xFC', '\a', '\x18', '\x2', '\x2', '\xFC', '\xFE', '\x5', ',', 
		'\x17', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', '\xFE', '\x101', 
		'\x3', '\x2', '\x2', '\x2', '\xFF', '\xFD', '\x3', '\x2', '\x2', '\x2', 
		'\xFF', '\x100', '\x3', '\x2', '\x2', '\x2', '\x100', '\x103', '\x3', 
		'\x2', '\x2', '\x2', '\x101', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', 
		'\x104', '\a', '\x18', '\x2', '\x2', '\x103', '\x102', '\x3', '\x2', '\x2', 
		'\x2', '\x103', '\x104', '\x3', '\x2', '\x2', '\x2', '\x104', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x105', '\x108', '\x5', '(', '\x15', '\x2', '\x106', 
		'\x108', '\a', '\x1C', '\x2', '\x2', '\x107', '\x105', '\x3', '\x2', '\x2', 
		'\x2', '\x107', '\x106', '\x3', '\x2', '\x2', '\x2', '\x108', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x109', '\x110', '\x5', '\x30', '\x19', '\x2', 
		'\x10A', '\x110', '\x5', '*', '\x16', '\x2', '\x10B', '\x10C', '\a', '\x13', 
		'\x2', '\x2', '\x10C', '\x10D', '\x5', '\x34', '\x1B', '\x2', '\x10D', 
		'\x10E', '\a', '\x14', '\x2', '\x2', '\x10E', '\x110', '\x3', '\x2', '\x2', 
		'\x2', '\x10F', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10F', '\x10A', 
		'\x3', '\x2', '\x2', '\x2', '\x10F', '\x10B', '\x3', '\x2', '\x2', '\x2', 
		'\x110', '\x33', '\x3', '\x2', '\x2', '\x2', '\x111', '\x116', '\x5', 
		'\x32', '\x1A', '\x2', '\x112', '\x113', '\a', '\x18', '\x2', '\x2', '\x113', 
		'\x115', '\x5', '\x32', '\x1A', '\x2', '\x114', '\x112', '\x3', '\x2', 
		'\x2', '\x2', '\x115', '\x118', '\x3', '\x2', '\x2', '\x2', '\x116', '\x114', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x117', '\x3', '\x2', '\x2', '\x2', 
		'\x117', '\x11A', '\x3', '\x2', '\x2', '\x2', '\x118', '\x116', '\x3', 
		'\x2', '\x2', '\x2', '\x119', '\x11B', '\a', '\x18', '\x2', '\x2', '\x11A', 
		'\x119', '\x3', '\x2', '\x2', '\x2', '\x11A', '\x11B', '\x3', '\x2', '\x2', 
		'\x2', '\x11B', '\x35', '\x3', '\x2', '\x2', '\x2', '\x11C', '\x11D', 
		'\a', '\x5', '\x2', '\x2', '\x11D', '\x11E', '\a', '\x1C', '\x2', '\x2', 
		'\x11E', '\x11F', '\a', '\xF', '\x2', '\x2', '\x11F', '\x37', '\x3', '\x2', 
		'\x2', '\x2', '\x120', '\x121', '\a', '\x6', '\x2', '\x2', '\x121', '\x122', 
		'\a', '\x1C', '\x2', '\x2', '\x122', '\x123', '\a', '\xF', '\x2', '\x2', 
		'\x123', '\x39', '\x3', '\x2', '\x2', '\x2', '\x124', '\x129', '\x5', 
		'>', ' ', '\x2', '\x125', '\x126', '\a', '\x17', '\x2', '\x2', '\x126', 
		'\x128', '\x5', '>', ' ', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', 
		'\x2', '\x128', '\x12B', '\x3', '\x2', '\x2', '\x2', '\x129', '\x127', 
		'\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\x3', '\x2', '\x2', '\x2', 
		'\x12A', ';', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x129', '\x3', '\x2', 
		'\x2', '\x2', '\x12C', '\x12D', '\t', '\x4', '\x2', '\x2', '\x12D', '=', 
		'\x3', '\x2', '\x2', '\x2', '\x12E', '\x131', '\a', '\x1E', '\x2', '\x2', 
		'\x12F', '\x131', '\x5', '@', '!', '\x2', '\x130', '\x12E', '\x3', '\x2', 
		'\x2', '\x2', '\x130', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', '?', 
		'\x3', '\x2', '\x2', '\x2', '\x132', '\x133', '\t', '\x5', '\x2', '\x2', 
		'\x133', '\x41', '\x3', '\x2', '\x2', '\x2', '\x1F', '\x45', 'R', 'T', 
		'\x61', 'q', 'z', '\x91', '\x9C', '\xAD', '\xB3', '\xB8', '\xBF', '\xC3', 
		'\xC8', '\xCC', '\xD3', '\xD7', '\xDC', '\xE3', '\xEA', '\xF0', '\xFF', 
		'\x103', '\x107', '\x10F', '\x116', '\x11A', '\x129', '\x130',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace FbsParser
